---
# User Environment Validation and Health Checks
# Purpose: Comprehensive validation of complete user environment
# Scope: Integration testing across system + user configurations

- name: Comprehensive User Environment Validation
  hosts: cluster_nodes
  become: no
  gather_facts: yes

  tasks:
    # ====================================================================
    # SYSTEM INTEGRATION VALIDATION
    # ====================================================================

    - name: Validate system foundation integration
      block:
        - name: Check system ansible results
          command: "{{ item }}"
          register: system_checks
          failed_when: false
          changed_when: false
          loop:
            - "/usr/local/bin/cluster-health-check"
            - "/usr/local/bin/cluster-tools-check"
            - "/usr/local/bin/cluster-security-status"

        - name: System validation results
          debug:
            msg: |
              === System Foundation Validation ===
              {% for check in system_checks.results %}
              {{ check.item }}: {{ 'PASSED' if check.rc == 0 else 'FAILED' }}
              {% endfor %}

    # ====================================================================
    # OMNI-CONFIG TEMPLATE VALIDATION
    # ====================================================================

    - name: Validate omni-config template deployment
      block:
        - name: Check core shell configurations
          shell: |
            source ~/.profile 2>&1 && echo "profile: OK" || echo "profile: ERROR"
            source ~/.bashrc 2>&1 && echo "bashrc: OK" || echo "bashrc: ERROR"
            command -v zsh >/dev/null && zsh -c 'source ~/.zshrc 2>&1 && echo "zshrc: OK" || echo "zshrc: ERROR"'
          register: shell_validation
          changed_when: false

        - name: Check environment variables
          shell: |
            source ~/.profile
            echo "NODE_ROLE=${NODE_ROLE:-UNSET}"
            echo "ARCH=${ARCH:-UNSET}"
            echo "HAS_EZA=${HAS_EZA:-UNSET}"
            echo "HAS_BAT=${HAS_BAT:-UNSET}"
            echo "HAS_STARSHIP=${HAS_STARSHIP:-UNSET}"
          register: env_validation
          changed_when: false

        - name: Check tool detection accuracy
          shell: |
            source ~/.profile
            for tool in eza bat fd rg fzf starship zoxide; do
                var_name="HAS_${tool^^}"
                var_value="${!var_name}"
                if command -v "$tool" >/dev/null 2>&1; then
                    actual="1"
                else
                    actual="0"
                fi
                if [[ "$var_value" == "$actual" ]]; then
                    echo "$tool: ✓ (detected=$var_value, actual=$actual)"
                else
                    echo "$tool: ✗ (detected=$var_value, actual=$actual)"
                fi
            done
          register: tool_detection_validation
          changed_when: false

        - name: Template validation results
          debug:
            msg: |
              === Omni-Config Template Validation ===
              Shell Loading:
              {{ shell_validation.stdout }}

              Environment Variables:
              {{ env_validation.stdout }}

              Tool Detection Accuracy:
              {{ tool_detection_validation.stdout }}

    # ====================================================================
    # USER ANSIBLE VALIDATION
    # ====================================================================

    - name: Validate user ansible deployment
      block:
        - name: Check user environment setup
          command: "{{ tools_directory }}/validate-user-environment"
          register: user_env_validation
          failed_when: false
          changed_when: false

        - name: Check user services setup
          command: "{{ tools_directory }}/validate-user-services"
          register: user_services_validation
          failed_when: false
          changed_when: false

        - name: User ansible validation results
          debug:
            msg: |
              === User Ansible Validation ===
              User Environment: {{ 'PASSED' if user_env_validation.rc == 0 else 'FAILED' }}
              User Services: {{ 'PASSED' if user_services_validation.rc == 0 else 'FAILED' }}

    # ====================================================================
    # INTEGRATION TESTING
    # ====================================================================

    - name: Test system + user integration
      block:
        - name: Test tool integration (system tools + user detection)
          shell: |
            source ~/.profile
            echo "=== Tool Integration Test ==="

            # Test eza integration
            if [[ $HAS_EZA == 1 ]] && command -v eza >/dev/null; then
                eza --version >/dev/null && echo "eza: ✓ System + User Integration Working"
            fi

            # Test starship integration
            if [[ $HAS_STARSHIP == 1 ]] && command -v starship >/dev/null; then
                starship prompt >/dev/null 2>&1 && echo "starship: ✓ System + User Integration Working"
            fi

            # Test git integration
            if git config user.name >/dev/null 2>&1; then
                echo "git: ✓ User Configuration Applied"
            fi

            # Test SSH integration
            if [[ -f ~/.ssh/config ]]; then
                echo "ssh: ✓ User Configuration Applied"
            fi
          register: integration_test
          changed_when: false

        - name: Test cluster connectivity
          shell: |
            echo "=== Cluster Connectivity Test ==="
            {% for node in groups['cluster_nodes'] %}
            {% if node != inventory_hostname %}
            if ping -c 1 -W 2 {{ node }} >/dev/null 2>&1; then
                echo "{{ node }}: ✓ Reachable"
            else
                echo "{{ node }}: ✗ Unreachable"
            fi
            {% endif %}
            {% endfor %}
          register: connectivity_test
          changed_when: false

        - name: Test NFS integration
          shell: |
            echo "=== NFS Integration Test ==="
            if mountpoint -q {{ nfs_mount }} 2>/dev/null; then
                echo "NFS: ✓ Mounted at {{ nfs_mount }}"
                if ls {{ nfs_mount }} >/dev/null 2>&1; then
                    echo "NFS: ✓ Accessible"
                else
                    echo "NFS: ✗ Mount exists but not accessible"
                fi
            else
                echo "NFS: ✗ Not mounted"
            fi
          register: nfs_test
          changed_when: false

        - name: Integration test results
          debug:
            msg: |
              === Integration Test Results ===
              {{ integration_test.stdout }}

              {{ connectivity_test.stdout }}

              {{ nfs_test.stdout }}

    # ====================================================================
    # NODE-SPECIFIC VALIDATION
    # ====================================================================

    - name: Validate cooperator-specific configuration
      block:
        - name: Test web development tools
          command: "{{ tools_directory }}/web-dev-server"
          register: web_dev_test
          failed_when: false
          changed_when: false

        - name: Test cluster management tools
          command: "{{ tools_directory }}/cluster-mgmt status"
          register: cluster_mgmt_test
          failed_when: false
          changed_when: false

        - name: Cooperator validation results
          debug:
            msg: |
              === Cooperator-Specific Validation ===
              Web Development Tools: {{ 'Available' if web_dev_test.rc == 0 else 'Missing' }}
              Cluster Management: {{ 'Available' if cluster_mgmt_test.rc == 0 else 'Missing' }}
      when: inventory_hostname == "cooperator"

    - name: Validate projector-specific configuration
      block:
        - name: Test GPU development tools
          command: "{{ tools_directory }}/gpu-dev-setup check"
          register: gpu_dev_test
          failed_when: false
          changed_when: false

        - name: Test container development tools
          command: "{{ tools_directory }}/container-dev-setup check"
          register: container_dev_test
          failed_when: false
          changed_when: false

        - name: Projector validation results
          debug:
            msg: |
              === Projector-Specific Validation ===
              GPU Development: {{ 'Available' if gpu_dev_test.rc == 0 else 'Not Ready' }}
              Container Development: {{ 'Available' if container_dev_test.rc == 0 else 'Not Ready' }}
      when: inventory_hostname == "projector"

    - name: Validate director-specific configuration
      block:
        - name: Test ML development tools
          command: "{{ tools_directory }}/ml-dev-setup check"
          register: ml_dev_test
          failed_when: false
          changed_when: false

        - name: Test Jupyter environment
          command: "{{ tools_directory }}/ml-dev-setup jupyter"
          register: jupyter_test
          failed_when: false
          changed_when: false

        - name: Director validation results
          debug:
            msg: |
              === Director-Specific Validation ===
              ML Development: {{ 'Available' if ml_dev_test.rc == 0 else 'Not Ready' }}
              Jupyter Environment: {{ 'Available' if jupyter_test.rc == 0 else 'Not Ready' }}
      when: inventory_hostname == "director"

    # ====================================================================
    # COMPREHENSIVE VALIDATION REPORT
    # ====================================================================

    - name: Generate comprehensive validation report
      copy:
        dest: "{{ user_home }}/.local/share/validation-report-{{ ansible_date_time.epoch }}.txt"
        content: |
          ===================================================================
          COMPREHENSIVE USER ENVIRONMENT VALIDATION REPORT
          ===================================================================

          Node: {{ inventory_hostname }}
          Role: {{ node_role }}
          User: {{ ansible_user }}
          Timestamp: {{ ansible_date_time.iso8601 }}

          ===================================================================
          DEPLOYMENT LAYERS VALIDATION
          ===================================================================

          1. SYSTEM FOUNDATION (Main Ansible):
             {% for check in system_checks.results %}
             {{ check.item | basename }}: {{ 'PASSED' if check.rc == 0 else 'FAILED' }}
             {% endfor %}

          2. USER CONFIGURATION (Omni-Config):
             Shell Loading: {{ 'PASSED' if 'ERROR' not in shell_validation.stdout else 'FAILED' }}
             Environment Variables: {{ 'PASSED' if 'UNSET' not in env_validation.stdout else 'PARTIAL' }}
             Tool Detection: {{ 'PASSED' if '✗' not in tool_detection_validation.stdout else 'PARTIAL' }}

          3. USER ORCHESTRATION (User Ansible):
             User Environment: {{ 'PASSED' if user_env_validation.rc == 0 else 'FAILED' }}
             User Services: {{ 'PASSED' if user_services_validation.rc == 0 else 'FAILED' }}

          ===================================================================
          INTEGRATION TESTING
          ===================================================================

          System + User Tool Integration:
          {{ integration_test.stdout | indent(4) }}

          Cluster Connectivity:
          {{ connectivity_test.stdout | indent(4) }}

          NFS Integration:
          {{ nfs_test.stdout | indent(4) }}

          ===================================================================
          NODE-SPECIFIC VALIDATION
          ===================================================================

          {% if inventory_hostname == "cooperator" %}
          Cooperator Services:
          - Web Development: {{ 'Available' if web_dev_test.rc == 0 else 'Missing' }}
          - Cluster Management: {{ 'Available' if cluster_mgmt_test.rc == 0 else 'Missing' }}
          {% elif inventory_hostname == "projector" %}
          Projector Services:
          - GPU Development: {{ 'Available' if gpu_dev_test.rc == 0 else 'Not Ready' }}
          - Container Development: {{ 'Available' if container_dev_test.rc == 0 else 'Not Ready' }}
          {% elif inventory_hostname == "director" %}
          Director Services:
          - ML Development: {{ 'Available' if ml_dev_test.rc == 0 else 'Not Ready' }}
          - Jupyter Environment: {{ 'Available' if jupyter_test.rc == 0 else 'Not Ready' }}
          {% endif %}

          ===================================================================
          OVERALL STATUS
          ===================================================================

          {% set validation_score = 0 %}
          {% set total_checks = 0 %}

          {% for check in system_checks.results %}
          {% set total_checks = total_checks + 1 %}
          {% if check.rc == 0 %}{% set validation_score = validation_score + 1 %}{% endif %}
          {% endfor %}

          {% set total_checks = total_checks + 2 %}
          {% if user_env_validation.rc == 0 %}{% set validation_score = validation_score + 1 %}{% endif %}
          {% if user_services_validation.rc == 0 %}{% set validation_score = validation_score + 1 %}{% endif %}

          Validation Score: {{ validation_score }}/{{ total_checks }} ({{ (validation_score * 100 / total_checks) | round }}%)

          {% if validation_score == total_checks %}
          STATUS: ✓ FULLY VALIDATED - Complete user environment ready
          {% elif validation_score >= (total_checks * 0.8) %}
          STATUS: ⚠ MOSTLY VALIDATED - Minor issues detected
          {% else %}
          STATUS: ✗ VALIDATION FAILED - Significant issues require attention
          {% endif %}

          ===================================================================
          NEXT STEPS
          ===================================================================

          {% if validation_score < total_checks %}
          1. Review failed checks above
          2. Run individual validation scripts:
             - {{ tools_directory }}/validate-user-environment
             - {{ tools_directory }}/validate-user-services
          3. Re-run comprehensive validation after fixes
          {% else %}
          ✓ Environment fully validated and ready for use
          ✓ All deployment layers working correctly
          ✓ Integration between system and user configurations confirmed
          {% endif %}

          Report saved: {{ user_home }}/.local/share/validation-report-{{ ansible_date_time.epoch }}.txt
        mode: "0644"

    - name: Display final validation summary
      debug:
        msg: |
          ===================================================================
          VALIDATION COMPLETE: {{ inventory_hostname }}
          ===================================================================

          System Foundation: {{ 'PASSED' if system_checks.results | selectattr('rc', 'equalto', 0) | list | length == system_checks.results | length else 'ISSUES' }}
          User Configuration: {{ 'PASSED' if 'ERROR' not in shell_validation.stdout else 'ISSUES' }}
          User Orchestration: {{ 'PASSED' if user_env_validation.rc == 0 and user_services_validation.rc == 0 else 'ISSUES' }}

          Integration Testing: {{ 'PASSED' if '✓' in integration_test.stdout else 'ISSUES' }}
          Cluster Connectivity: {{ 'PASSED' if '✗' not in connectivity_test.stdout else 'ISSUES' }}

          Report: ~/.local/share/validation-report-{{ ansible_date_time.epoch }}.txt

          {% if system_checks.results | selectattr('rc', 'equalto', 0) | list | length == system_checks.results | length and user_env_validation.rc == 0 and user_services_validation.rc == 0 %}
          🎉 COMPLETE USER ENVIRONMENT VALIDATION SUCCESSFUL 🎉
          Strategic Hybrid Deployment: System + User = PERFECT INTEGRATION
          {% else %}
          ⚠️  Some validation issues detected - review report for details
          {% endif %}