---
# Essential tool installation - safe, minimal approach
# 1st Draft: Mock sequence showing hybrid tool management
- name: Install Essential Cluster Tools
  hosts: all
  become: yes

  vars:
    # Essential packages available in standard repos
    essential_packages:
      - zsh
      - tmux
      - git
      - curl
      - wget
      - htop
      - jq
      - vim

    # Modern CLI tools (Debian packages)
    modern_cli_packages:
      - eza
      - fd-find # Note: fdfind in Debian
      - ripgrep
      - fzf
      - bat # Note: batcat in Debian

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install essential packages
      apt:
        name: "{{ essential_packages }}"
        state: present

    - name: Install modern CLI packages
      apt:
        name: "{{ modern_cli_packages }}"
        state: present
      ignore_errors: yes # Some may not be available

    - name: Create tool compatibility symlinks
      file:
        src: "/usr/bin/{{ item.src }}"
        dest: "/usr/local/bin/{{ item.dest }}"
        state: link
      loop:
        - { src: "fdfind", dest: "fd" }
        - { src: "batcat", dest: "bat" }
      ignore_errors: yes

    - name: Verify core tools available
      command: "{{ item }}"
      loop:
        - "zsh --version"
        - "git --version"
        - "tmux -V"
      register: tool_verification
      changed_when: false
      ignore_errors: yes

    - name: Report tool installation status
      debug:
        msg: |
          {{ inventory_hostname }} Tool Status:
          {% for result in tool_verification.results %}
          - {{ result.item.split()[0] }}: {{ 'Available' if result.rc == 0 else 'Missing' }}
          {% endfor %}

    # Note: Additional tools (starship, zoxide, atuin) can be installed
    # via user-level installation or specialized scripts as needed
    # This maintains minimal ansible approach

    - name: Note for agents
      debug:
        msg: |
          Tool installation framework complete.
          User-level tools (starship, zoxide, etc.) managed separately.
          System preparation ready for chezmoi user configuration deployment.
