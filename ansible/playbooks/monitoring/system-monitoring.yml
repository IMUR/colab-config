---
# System Monitoring and Health Checks
# Purpose: Comprehensive monitoring setup for Co-lab cluster
# Scope: System-level monitoring - health, performance, logs

- name: Configure System Monitoring
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    monitoring_user: "{{ ansible_user }}"
    log_retention_days: 30
    monitor_interval: 300  # 5 minutes

  tasks:
    # ====================================================================
    # MONITORING TOOLS INSTALLATION
    # ====================================================================

    - name: Install system monitoring packages
      apt:
        name:
          - htop              # Interactive process viewer
          - iotop             # I/O monitoring
          - nethogs           # Network bandwidth per process
          - ncdu              # Disk usage analyzer
          - sysstat           # System performance tools (sar, iostat)
          - vnstat            # Network statistics
          - lm-sensors        # Hardware sensors
          - smartmontools     # Hard drive health
          - tree              # Directory tree display
        state: present

    - name: Enable and start sysstat service
      systemd:
        name: sysstat
        enabled: yes
        state: started

    # ====================================================================
    # LOG MANAGEMENT
    # ====================================================================

    - name: Configure logrotate for cluster logs
      copy:
        dest: /etc/logrotate.d/cluster-monitoring
        content: |
          # Co-lab Cluster Log Rotation

          /var/log/cluster/*.log {
              daily
              rotate {{ log_retention_days }}
              compress
              delaycompress
              missingok
              notifempty
              create 0644 {{ monitoring_user }} {{ monitoring_user }}
              postrotate
                  systemctl reload rsyslog > /dev/null 2>&1 || true
              endscript
          }

          /var/log/caddy/*.log {
              daily
              rotate {{ log_retention_days }}
              compress
              delaycompress
              missingok
              notifempty
              create 0644 caddy caddy
              postrotate
                  systemctl reload caddy > /dev/null 2>&1 || true
              endscript
          }
        mode: "0644"

    - name: Create cluster log directory
      file:
        path: /var/log/cluster
        state: directory
        owner: "{{ monitoring_user }}"
        group: "{{ monitoring_user }}"
        mode: "0755"

    # ====================================================================
    # SYSTEM HEALTH MONITORING SCRIPTS
    # ====================================================================

    - name: Create comprehensive system health monitor
      copy:
        dest: /usr/local/bin/cluster-health-check
        content: |
          #!/bin/bash
          # Comprehensive Cluster Health Check Script

          LOG_FILE="/var/log/cluster/health-$(hostname).log"
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

          # Function to log with timestamp
          log_message() {
              echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
          }

          # Function to check service status
          check_service() {
              local service=$1
              if systemctl is-active --quiet "$service"; then
                  log_message "✓ Service $service: RUNNING"
                  return 0
              else
                  log_message "✗ Service $service: NOT RUNNING"
                  return 1
              fi
          }

          # Function to check disk usage
          check_disk_usage() {
              local threshold=80
              local usage=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')

              if [[ $usage -lt $threshold ]]; then
                  log_message "✓ Disk usage: ${usage}% (OK)"
                  return 0
              else
                  log_message "⚠ Disk usage: ${usage}% (WARNING: >$threshold%)"
                  return 1
              fi
          }

          # Function to check memory usage
          check_memory_usage() {
              local mem_info=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
              local threshold=90

              if [[ $mem_info -lt $threshold ]]; then
                  log_message "✓ Memory usage: ${mem_info}% (OK)"
                  return 0
              else
                  log_message "⚠ Memory usage: ${mem_info}% (WARNING: >$threshold%)"
                  return 1
              fi
          }

          # Function to check CPU load
          check_cpu_load() {
              local load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
              local cpu_count=$(nproc)
              local threshold=$(echo "$cpu_count * 2" | bc -l)

              if (( $(echo "$load < $threshold" | bc -l) )); then
                  log_message "✓ CPU load: $load (OK, threshold: $threshold)"
                  return 0
              else
                  log_message "⚠ CPU load: $load (WARNING: >$threshold)"
                  return 1
              fi
          }

          # Function to check network connectivity
          check_network() {
              local nodes=("cooperator" "projector" "director")
              local current_node=$(hostname)
              local failed=0

              for node in "${nodes[@]}"; do
                  if [[ "$node" != "$current_node" ]]; then
                      if ping -c 1 -W 2 "$node" >/dev/null 2>&1; then
                          log_message "✓ Network to $node: REACHABLE"
                      else
                          log_message "✗ Network to $node: UNREACHABLE"
                          ((failed++))
                      fi
                  fi
              done

              return $failed
          }

          # Function to check NFS mount
          check_nfs() {
              if mountpoint -q /cluster-nas 2>/dev/null; then
                  log_message "✓ NFS mount: ACCESSIBLE"
                  return 0
              else
                  log_message "✗ NFS mount: NOT ACCESSIBLE"
                  return 1
              fi
          }

          # Main health check
          main() {
              log_message "=== Health Check Started on $(hostname) ==="

              local total_checks=0
              local failed_checks=0

              # System resource checks
              ((total_checks++)); check_disk_usage || ((failed_checks++))
              ((total_checks++)); check_memory_usage || ((failed_checks++))
              ((total_checks++)); check_cpu_load || ((failed_checks++))

              # Network and connectivity
              ((total_checks++)); check_network || ((failed_checks++))
              ((total_checks++)); check_nfs || ((failed_checks++))

              # Essential services
              ((total_checks++)); check_service ssh || ((failed_checks++))

              # Node-specific service checks
              case "$(hostname)" in
                  cooperator)
                      ((total_checks++)); check_service caddy || ((failed_checks++))
                      ((total_checks++)); check_service nfs-kernel-server || ((failed_checks++))
                      ;;
                  projector)
                      # Check if Docker is installed and running
                      if command -v docker >/dev/null 2>&1; then
                          ((total_checks++)); check_service docker || ((failed_checks++))
                      fi
                      ;;
                  director)
                      # Check if Jupyter is installed and running
                      if systemctl is-enabled jupyter >/dev/null 2>&1; then
                          ((total_checks++)); check_service jupyter || ((failed_checks++))
                      fi
                      ;;
              esac

              # Summary
              local success_rate=$(echo "scale=1; ($total_checks - $failed_checks) * 100 / $total_checks" | bc -l)
              log_message "=== Health Check Summary ==="
              log_message "Total checks: $total_checks"
              log_message "Failed checks: $failed_checks"
              log_message "Success rate: ${success_rate}%"

              if [[ $failed_checks -eq 0 ]]; then
                  log_message "✓ Overall status: HEALTHY"
                  exit 0
              elif [[ $failed_checks -le 2 ]]; then
                  log_message "⚠ Overall status: WARNING"
                  exit 1
              else
                  log_message "✗ Overall status: CRITICAL"
                  exit 2
              fi
          }

          main "$@"
        mode: "0755"

    # ====================================================================
    # PERFORMANCE MONITORING SCRIPT
    # ====================================================================

    - name: Create performance monitoring script
      copy:
        dest: /usr/local/bin/cluster-performance-report
        content: |
          #!/bin/bash
          # Cluster Performance Monitoring Report

          REPORT_FILE="/var/log/cluster/performance-$(hostname)-$(date +%Y%m%d).log"

          echo "=== Performance Report: $(hostname) ===" | tee "$REPORT_FILE"
          echo "Generated: $(date)" | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # System Information
          echo "=== System Information ===" | tee -a "$REPORT_FILE"
          echo "Hostname: $(hostname)" | tee -a "$REPORT_FILE"
          echo "Uptime: $(uptime)" | tee -a "$REPORT_FILE"
          echo "Kernel: $(uname -r)" | tee -a "$REPORT_FILE"
          echo "Architecture: $(uname -m)" | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # CPU Information
          echo "=== CPU Information ===" | tee -a "$REPORT_FILE"
          lscpu | grep -E "(Model name|CPU\(s\)|Thread|Core)" | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # Memory Usage
          echo "=== Memory Usage ===" | tee -a "$REPORT_FILE"
          free -h | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # Disk Usage
          echo "=== Disk Usage ===" | tee -a "$REPORT_FILE"
          df -h | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # Network Statistics
          echo "=== Network Statistics ===" | tee -a "$REPORT_FILE"
          if command -v vnstat >/dev/null 2>&1; then
              vnstat -i eth0 -s 2>/dev/null || echo "vnstat data not available" | tee -a "$REPORT_FILE"
          fi
          echo | tee -a "$REPORT_FILE"

          # Top Processes (CPU)
          echo "=== Top 10 CPU Processes ===" | tee -a "$REPORT_FILE"
          ps aux --sort=-%cpu | head -11 | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # Top Processes (Memory)
          echo "=== Top 10 Memory Processes ===" | tee -a "$REPORT_FILE"
          ps aux --sort=-%mem | head -11 | tee -a "$REPORT_FILE"
          echo | tee -a "$REPORT_FILE"

          # Load Average History (if sar is available)
          echo "=== Load Average History (Last 24h) ===" | tee -a "$REPORT_FILE"
          if command -v sar >/dev/null 2>&1; then
              sar -u 1 1 | tail -1 | tee -a "$REPORT_FILE"
          fi
          echo | tee -a "$REPORT_FILE"

          # Hardware Temperature (if sensors available)
          echo "=== Hardware Temperature ===" | tee -a "$REPORT_FILE"
          if command -v sensors >/dev/null 2>&1; then
              sensors 2>/dev/null | grep -E "(Core|temp)" | tee -a "$REPORT_FILE"
          else
              echo "lm-sensors not configured" | tee -a "$REPORT_FILE"
          fi
          echo | tee -a "$REPORT_FILE"

          # Node-specific monitoring
          case "$(hostname)" in
              projector)
                  echo "=== GPU Information ===" | tee -a "$REPORT_FILE"
                  if command -v nvidia-smi >/dev/null 2>&1; then
                      nvidia-smi --query-gpu=name,temperature.gpu,utilization.gpu,memory.used,memory.total --format=csv,noheader | tee -a "$REPORT_FILE"
                  else
                      echo "NVIDIA GPU not detected or drivers not installed" | tee -a "$REPORT_FILE"
                  fi
                  echo | tee -a "$REPORT_FILE"
                  ;;
              director)
                  echo "=== GPU Information ===" | tee -a "$REPORT_FILE"
                  if command -v nvidia-smi >/dev/null 2>&1; then
                      nvidia-smi --query-gpu=name,temperature.gpu,utilization.gpu,memory.used,memory.total --format=csv,noheader | tee -a "$REPORT_FILE"
                  else
                      echo "NVIDIA GPU not detected or drivers not installed" | tee -a "$REPORT_FILE"
                  fi
                  echo | tee -a "$REPORT_FILE"
                  ;;
          esac

          echo "Report saved to: $REPORT_FILE"
        mode: "0755"

    # ====================================================================
    # AUTOMATED MONITORING SETUP
    # ====================================================================

    - name: Create monitoring cron jobs
      cron:
        name: "{{ item.name }}"
        minute: "{{ item.minute }}"
        hour: "{{ item.hour }}"
        job: "{{ item.job }}"
        user: root
      loop:
        - name: "Cluster health check"
          minute: "*/5"
          hour: "*"
          job: "/usr/local/bin/cluster-health-check >/dev/null 2>&1"
        - name: "Daily performance report"
          minute: "0"
          hour: "6"
          job: "/usr/local/bin/cluster-performance-report >/dev/null 2>&1"
        - name: "Weekly disk cleanup"
          minute: "0"
          hour: "2"
          job: "find /var/log/cluster -name '*.log' -mtime +{{ log_retention_days }} -delete"

    # ====================================================================
    # MONITORING DASHBOARD SCRIPT
    # ====================================================================

    - name: Create real-time monitoring dashboard
      copy:
        dest: /usr/local/bin/cluster-dashboard
        content: |
          #!/bin/bash
          # Real-time Cluster Monitoring Dashboard

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color

          while true; do
              clear
              echo -e "${BLUE}╔════════════════════════════════════════════════════════════════╗${NC}"
              echo -e "${BLUE}║               Co-lab Cluster Real-time Dashboard               ║${NC}"
              echo -e "${BLUE}║                     Node: $(hostname)                            ║${NC}"
              echo -e "${BLUE}╚════════════════════════════════════════════════════════════════╝${NC}"
              echo

              # System Overview
              echo -e "${BLUE}System Overview:${NC}"
              echo "  Time: $(date)"
              echo "  Uptime: $(uptime -p)"
              echo

              # Resource Usage
              echo -e "${BLUE}Resource Usage:${NC}"

              # CPU
              CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
              echo -e "  CPU: ${GREEN}${CPU_USAGE}%${NC}"

              # Memory
              MEM_INFO=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
              if [[ $MEM_INFO -gt 80 ]]; then
                  COLOR=$RED
              elif [[ $MEM_INFO -gt 60 ]]; then
                  COLOR=$YELLOW
              else
                  COLOR=$GREEN
              fi
              echo -e "  Memory: ${COLOR}${MEM_INFO}%${NC}"

              # Disk
              DISK_USAGE=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
              if [[ $DISK_USAGE -gt 80 ]]; then
                  COLOR=$RED
              elif [[ $DISK_USAGE -gt 60 ]]; then
                  COLOR=$YELLOW
              else
                  COLOR=$GREEN
              fi
              echo -e "  Disk: ${COLOR}${DISK_USAGE}%${NC}"
              echo

              # Network
              echo -e "${BLUE}Network:${NC}"
              for node in cooperator projector director; do
                  if [[ "$node" != "$(hostname)" ]]; then
                      if ping -c 1 -W 1 "$node" >/dev/null 2>&1; then
                          echo -e "  $node: ${GREEN}Online${NC}"
                      else
                          echo -e "  $node: ${RED}Offline${NC}"
                      fi
                  fi
              done
              echo

              # Services
              echo -e "${BLUE}Critical Services:${NC}"
              SERVICES=("ssh")
              case "$(hostname)" in
                  cooperator)
                      SERVICES+=("caddy" "nfs-kernel-server")
                      ;;
                  projector)
                      if command -v docker >/dev/null 2>&1; then
                          SERVICES+=("docker")
                      fi
                      ;;
                  director)
                      if systemctl is-enabled jupyter >/dev/null 2>&1; then
                          SERVICES+=("jupyter")
                      fi
                      ;;
              esac

              for service in "${SERVICES[@]}"; do
                  if systemctl is-active --quiet "$service" 2>/dev/null; then
                      echo -e "  $service: ${GREEN}Running${NC}"
                  else
                      echo -e "  $service: ${RED}Stopped${NC}"
                  fi
              done
              echo

              # Top Processes
              echo -e "${BLUE}Top 5 Processes (CPU):${NC}"
              ps aux --sort=-%cpu | head -6 | tail -5 | awk '{printf "  %-12s %5s%% %s\n", $1, $3, $11}'
              echo

              echo -e "${YELLOW}Press Ctrl+C to exit | Refreshing every 5 seconds...${NC}"
              sleep 5
          done
        mode: "0755"

    # ====================================================================
    # MONITORING INTEGRATION
    # ====================================================================

    - name: Create monitoring status command
      copy:
        dest: /usr/local/bin/cluster-monitoring-status
        content: |
          #!/bin/bash
          # Cluster Monitoring Status Overview

          echo "=== Cluster Monitoring Status ==="
          echo "Node: $(hostname)"
          echo "Date: $(date)"
          echo

          echo "=== Available Monitoring Commands ==="
          echo "  cluster-health-check      - Run health diagnostics"
          echo "  cluster-performance-report - Generate performance report"
          echo "  cluster-dashboard         - Real-time monitoring dashboard"
          echo "  cluster-security-status   - Security status report"
          echo

          echo "=== Monitoring Services ==="
          echo "Cron jobs status:"
          crontab -l | grep -E "(health-check|performance-report)" | wc -l | xargs echo "  Active monitoring jobs:"
          echo

          echo "=== Recent Health Status ==="
          if [[ -f "/var/log/cluster/health-$(hostname).log" ]]; then
              echo "Last health check:"
              tail -3 "/var/log/cluster/health-$(hostname).log" | grep -E "(✓|✗|⚠)" | tail -1
          else
              echo "  No health checks recorded yet"
          fi
          echo

          echo "=== Log Files ==="
          echo "  Health logs: /var/log/cluster/health-$(hostname).log"
          echo "  Performance logs: /var/log/cluster/performance-$(hostname)-*.log"
          echo "  Security logs: /var/log/auth.log"
          echo

          echo "=== Quick Health Summary ==="
          /usr/local/bin/cluster-health-check 2>&1 | grep -E "✓|✗|⚠" | tail -5
        mode: "0755"

    - name: Monitoring setup complete
      debug:
        msg: |
          === System Monitoring Configuration Complete ===

          Available Commands:
          - cluster-health-check: Automated health diagnostics
          - cluster-performance-report: Detailed performance analysis
          - cluster-dashboard: Real-time monitoring interface
          - cluster-monitoring-status: Overview of monitoring setup

          Automated Tasks:
          - Health checks every 5 minutes
          - Daily performance reports at 6 AM
          - Weekly log cleanup

          Log Files:
          - Health: /var/log/cluster/health-$(hostname).log
          - Performance: /var/log/cluster/performance-$(hostname)-DATE.log

          Usage:
          - Run 'cluster-dashboard' for real-time monitoring
          - Check 'cluster-monitoring-status' for overview