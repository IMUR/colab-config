# Modern ZSH Configuration - Unified Cluster Foundation
# Designed for cluster environments with cross-arch compatibility

# Performance: Start timing for optimization
zmodload zsh/datetime
_shell_start_time=$EPOCHREALTIME

# ====================================================================
# CRITICAL: Source .profile FIRST (Foundation Layer)
# ====================================================================
# This ensures we get all environment variables, PATH, and tool detection
# before any interactive shell setup begins

emulate sh -c 'source ~/.profile'

# Now we have: NODE_TYPE, NODE_ROLE, HAS_*, PATH, NVM_DIR, etc.
# from our templated .profile foundation

# ====================================================================
# MODERN TOOL AVAILABILITY CHECKS
# ====================================================================

# Function to check if command exists (defined locally for zsh)
_has() { command -v "$1" >/dev/null 2>&1; }

# Tool availability flags are now set in ~/.profile
# This ensures consistency across all shells and SSH contexts

# ====================================================================
# ZSH OPTIONS - PRODUCTIVITY FOCUSED
# ====================================================================

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

setopt HIST_IGNORE_DUPS      # Don't record duplicate entries
setopt HIST_IGNORE_ALL_DUPS  # Delete old duplicate entries
setopt HIST_FIND_NO_DUPS     # Don't display duplicates during search
setopt HIST_SAVE_NO_DUPS     # Don't save duplicates
setopt HIST_VERIFY           # Verify history expansions
setopt SHARE_HISTORY         # Share history between sessions
setopt APPEND_HISTORY        # Append to history file
setopt INC_APPEND_HISTORY    # Append immediately, not on exit

# Directory navigation
setopt AUTO_CD               # Auto cd when typing directory name
setopt AUTO_PUSHD            # Push directories to stack
setopt PUSHD_IGNORE_DUPS     # Don't push duplicates
setopt PUSHD_SILENT          # Don't print directory stack

# Completion
setopt AUTO_MENU             # Show menu on tab
setopt COMPLETE_IN_WORD      # Complete from both ends
setopt ALWAYS_TO_END         # Move cursor to end after completion

# Globbing
setopt EXTENDED_GLOB         # Enable extended globbing
setopt NULL_GLOB             # Remove non-matching globs

# ====================================================================
# MODERN ALIASES - ENHANCED PRODUCTIVITY
# ====================================================================

# Core enhanced replacements (unified detection)
if [[ $HAS_EZA == 1 ]]; then
  alias ls='eza --icons --group-directories-first'
  alias ll='eza -l --icons --group-directories-first --time-style=relative'
  alias la='eza -la --icons --group-directories-first --time-style=relative'
  alias tree='eza --tree --icons'
  alias ltree='eza --tree --icons -l'
else
  alias ls='ls --color=auto --group-directories-first'
  alias ll='ls -la --color=auto'
  alias la='ls -A --color=auto'
fi

# Unified bat detection (handles both bat and batcat)
if [[ $HAS_BAT == 1 ]]; then
  if _has bat; then
    alias cat='bat --style=auto'
    alias less='bat --paging=always'
  elif _has batcat; then
    alias cat='batcat --style=auto'
    alias less='batcat --paging=always'
  fi
else
  alias cat='cat'
fi

# Unified fd detection (handles both fd and fdfind)
if [[ $HAS_FD == 1 ]]; then
  if _has fd; then
    alias find='fd'
  elif _has fdfind; then
    alias find='fdfind'
  fi
else
  alias find='find'
fi

if [[ $HAS_RG == 1 ]]; then
  alias grep='rg'
else
  alias grep='grep --color=auto'
fi

if [[ $HAS_DUST == 1 ]]; then
  alias du='dust'
else
  alias du='du -h'
fi

# File manager
if [[ $HAS_NNN == 1 ]]; then
  alias n='nnn -e'
  alias nnn='nnn -e'
  export NNN_FIFO=/tmp/nnn.fifo
  export NNN_PLUG='p:preview-tabbed'
fi

# Git enhancements
if [[ $HAS_DELTA == 1 ]]; then
  export GIT_PAGER='delta'
fi

# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Cluster-specific shortcuts
alias cluster='cd /cluster-nas'
alias configs='cd /cluster-nas/configs'
alias docs='cd /cluster-nas/documentation'

# Quick system info
alias sysinfo='echo "Node: $(hostname)" && echo "Role: $NODE_ROLE" && echo "Arch: $ARCH" && echo "Load: $(uptime | cut -d, -f3-)"'

# ====================================================================
# COMPLETION SYSTEM (LOAD FIRST)
# ====================================================================

# Initialize modern completion system before other tools
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
  compinit -d "${ZDOTDIR:-$HOME}/.zcompdump"
else
  compinit -C -d "${ZDOTDIR:-$HOME}/.zcompdump"
fi

# Modern completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '[%d]'

# ====================================================================
# MODERN INTEGRATIONS (LOAD AFTER COMPLETION)
# ====================================================================

# Zoxide (smart cd) initialization
if [[ $HAS_ZOXIDE == 1 ]]; then
  eval "$(zoxide init zsh)"
  alias cd='z'
  alias cdi='zi'  # Interactive mode
fi

# FZF integration
if [[ $HAS_FZF == 1 ]]; then
  # Use fd for fzf if available (with unified detection)
  if [[ $HAS_FD == 1 ]]; then
    if _has fd; then
      export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    elif _has fdfind; then
      export FZF_DEFAULT_COMMAND='fdfind --type f --hidden --follow --exclude .git'
    fi
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  fi
  
  # Enhanced fzf options
  export FZF_DEFAULT_OPTS='
    --height 40%
    --layout=reverse
    --border
    --color=hl:#5f87af
    --color=hl+:#5fd7ff
    --color=info:#afaf87
    --color=marker:#87ff00
    --color=pointer:#ff87d7
    --color=spinner:#ff87d7
    --color=prompt:#87ff00
  '
  
  # Load fzf key bindings and completion (after compinit)
  source <(fzf --zsh) 2>/dev/null || true
fi

# Claude local installation PATH
if [ -d "$HOME/.claude/local" ]; then
    export PATH="$HOME/.claude/local:$PATH"
fi

# ====================================================================
# HISTORY SYSTEM - ATUIN (LOAD BEFORE PROMPT)
# ====================================================================

# Initialize Atuin if available (history replacement)
if [[ $HAS_ATUIN == 1 ]]; then
  eval "$(atuin init zsh)"
fi

# ====================================================================
# PROMPT SYSTEM - STARSHIP (LOAD LAST)
# ====================================================================

# Initialize Starship prompt (should be last UI element)
if [[ $HAS_STARSHIP == 1 ]]; then
  eval "$(starship init zsh)"
else
  # Fallback prompt - clean and functional
  autoload -Uz vcs_info
  precmd() { vcs_info }
  zstyle ':vcs_info:git:*' formats ' %b'
  setopt PROMPT_SUBST
  PROMPT='%F{green}%n%f@%F{blue}%m%f %F{yellow}%~%f%F{red}${vcs_info_msg_0_}%f %# '
fi

# ====================================================================
# PERFORMANCE REPORTING
# ====================================================================

# Show startup time (only in interactive shells)
if [[ -o interactive ]]; then
  _shell_end_time=$EPOCHREALTIME
  # Use float arithmetic for calculation
  zmodload zsh/mathfunc 2>/dev/null
  _startup_time=$(( ( _shell_end_time - _shell_start_time ) * 1000 ))

  # Convert to integer for comparison and printing
  _startup_ms=${_startup_time%.*}

  if (( _startup_ms > 100 )); then
    echo "🐚 Shell loaded in ${_startup_ms}ms (consider optimization)"
  fi
  unset _startup_ms
fi

# ====================================================================
# NODE-SPECIFIC CUSTOMIZATIONS
# ====================================================================

# Universal service management aliases
alias services='systemctl list-units --type=service --state=active'

# GPU aliases (only work if nvidia-smi is installed)
if command -v nvidia-smi >/dev/null 2>&1; then
    alias gpus='nvidia-smi'
    alias gpu-watch='watch -n 1 nvidia-smi'
    alias gpu-mem='nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader'
    alias gpu-util='nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader'
fi

# Docker aliases (only work if docker is installed)
if command -v docker >/dev/null 2>&1; then
    alias dps='docker ps -a --format "table {{`{{.ID}}`}}\t{{`{{.Image}}`}}\t{{`{{.Status}}`}}\t{{`{{.Ports}}`}}"'
    alias dimg='docker images'
    alias dlog='docker logs -f'
    alias dexec='docker exec -it'
    alias dstop='docker stop'
    alias dstart='docker start'
    alias drm='docker rm'
    alias dprune='docker system prune -af'
    # GPU support if available
    if [ -f /usr/bin/nvidia-container-runtime ]; then
        alias drun-gpu='docker run -it --rm --gpus all'
    fi
fi

# Load additional local configurations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Clean up
unset _shell_start_time _shell_end_time _startup_time
unfunction _has