---
# Security Baseline Configuration
# Purpose: Essential security configurations for Co-lab cluster
# Scope: System-level security - minimal and safe approach

- name: Configure Security Baseline
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    allowed_users:
      - "{{ ansible_user }}"
    ssh_port: 22
    cluster_network: "192.168.254.0/24"

  tasks:
    # ====================================================================
    # SSH SECURITY HARDENING
    # ====================================================================

    - name: Configure SSH security settings
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          # Co-lab Cluster SSH Security Configuration

          # Basic security
          PermitRootLogin no
          PasswordAuthentication yes
          PubkeyAuthentication yes
          AuthorizedKeysFile .ssh/authorized_keys

          # Connection limits
          MaxAuthTries 3
          MaxSessions 10
          LoginGraceTime 60

          # User restrictions
          AllowUsers {{ allowed_users | join(' ') }}

          # Protocol settings
          Protocol 2
          X11Forwarding yes
          PrintMotd no
          TCPKeepAlive yes
          ClientAliveInterval 300
          ClientAliveCountMax 2

          # Disable unused features
          PermitEmptyPasswords no
          PermitUserEnvironment no
          GatewayPorts no
          AllowAgentForwarding yes
          AllowTcpForwarding yes
        marker: "# {mark} CLUSTER SSH SECURITY"
        backup: yes
      notify: restart ssh

    - name: Ensure SSH service is running
      systemd:
        name: ssh
        state: started
        enabled: yes

    # ====================================================================
    # FIREWALL CONFIGURATION (BASIC)
    # ====================================================================

    - name: Install ufw firewall
      apt:
        name: ufw
        state: present

    - name: Reset ufw to defaults
      ufw:
        state: reset

    - name: Set ufw default policies
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: incoming, policy: deny }
        - { direction: outgoing, policy: allow }
        - { direction: routed, policy: deny }

    - name: Allow SSH access
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp
        comment: "SSH access"

    - name: Allow cluster internal communication
      ufw:
        rule: allow
        src: "{{ cluster_network }}"
        comment: "Cluster internal network"

    - name: Allow cooperator specific services
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: "80", proto: "tcp", comment: "HTTP (Caddy)" }
        - { port: "443", proto: "tcp", comment: "HTTPS (Caddy)" }
        - { port: "2049", proto: "tcp", comment: "NFS server" }
        - { port: "9090", proto: "tcp", comment: "Cockpit management" }
      when: inventory_hostname == "cooperator"

    - name: Enable ufw firewall
      ufw:
        state: enabled

    # ====================================================================
    # USER SECURITY
    # ====================================================================

    - name: Set secure permissions on user home directory
      file:
        path: "{{ ansible_env.HOME }}"
        mode: "0750"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Ensure .ssh directory exists with correct permissions
      file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory
        mode: "0700"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Set secure permissions on authorized_keys if it exists
      file:
        path: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
        mode: "0600"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: ansible_env.HOME + "/.ssh/authorized_keys" is file

    # ====================================================================
    # SYSTEM SECURITY SETTINGS
    # ====================================================================

    - name: Configure kernel security parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        # Network security
        - { name: "net.ipv4.ip_forward", value: "0" }
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.secure_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.secure_redirects", value: "0" }
        # Source routing
        - { name: "net.ipv4.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv4.conf.default.accept_source_route", value: "0" }
        # ICMP redirects
        - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
        # IP spoofing protection
        - { name: "net.ipv4.conf.all.rp_filter", value: "1" }
        - { name: "net.ipv4.conf.default.rp_filter", value: "1" }

    # ====================================================================
    # LOG MONITORING SETUP
    # ====================================================================

    - name: Install log monitoring tools
      apt:
        name:
          - logwatch
          - fail2ban
        state: present

    - name: Configure fail2ban for SSH protection
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          # Ban time: 10 minutes
          bantime = 600
          # Find time: 10 minutes
          findtime = 600
          # Max retry: 3 attempts
          maxretry = 3

          [sshd]
          enabled = true
          port = {{ ssh_port }}
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 1800
        mode: "0644"
        backup: yes
      notify: restart fail2ban

    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes

    # ====================================================================
    # SECURITY MONITORING SCRIPT
    # ====================================================================

    - name: Create security monitoring script
      copy:
        dest: /usr/local/bin/cluster-security-status
        content: |
          #!/bin/bash
          # Co-lab Cluster Security Status Monitor

          echo "=== Security Status Report: $(hostname) ==="
          echo "Generated: $(date)"
          echo

          echo "=== SSH Security ==="
          echo "SSH Service: $(systemctl is-active ssh)"
          echo "SSH Port: {{ ssh_port }}"
          echo "Root Login: $(grep '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print $2}')"
          echo "Password Auth: $(grep '^PasswordAuthentication' /etc/ssh/sshd_config | awk '{print $2}')"
          echo

          echo "=== Firewall Status ==="
          echo "UFW Status: $(ufw status | head -1)"
          echo "Active Rules:"
          ufw status numbered | grep -E "\[\s*[0-9]+\]" | head -10
          echo

          echo "=== Failed Login Attempts (Last 24h) ==="
          if [[ -f /var/log/auth.log ]]; then
              grep "Failed password" /var/log/auth.log | grep "$(date '+%b %d')" | wc -l | xargs echo "Failed SSH attempts today:"
              fail2ban-client status sshd 2>/dev/null | grep "Currently banned" || echo "Fail2ban: No current bans"
          else
              echo "Auth log not available"
          fi
          echo

          echo "=== Network Connections ==="
          echo "Active SSH connections:"
          ss -tuln | grep ":{{ ssh_port }}"
          echo
          echo "Listening services:"
          ss -tuln | grep LISTEN | head -10
          echo

          echo "=== User Security ==="
          echo "Users with shell access:"
          grep -E "/bin/(bash|zsh|sh)$" /etc/passwd | cut -d: -f1
          echo
          echo "Users in sudo group:"
          getent group sudo | cut -d: -f4
          echo

          echo "=== System Updates ==="
          if command -v apt >/dev/null; then
              echo "Security updates available:"
              apt list --upgradable 2>/dev/null | grep -i security | wc -l
          fi
          echo

          echo "=== Recent Security Events ==="
          if [[ -f /var/log/auth.log ]]; then
              echo "Recent auth events (last 5):"
              tail -5 /var/log/auth.log | cut -d' ' -f1-3,5-
          fi
        mode: "0755"

    # ====================================================================
    # SECURITY VALIDATION
    # ====================================================================

    - name: Test SSH configuration
      command: sshd -t
      register: ssh_test
      changed_when: false

    - name: Test firewall status
      command: ufw status
      register: ufw_status
      changed_when: false

    - name: Security configuration summary
      debug:
        msg: |
          === Security Baseline Applied ===
          SSH Configuration: {{ 'Valid' if ssh_test.rc == 0 else 'Error' }}
          Firewall Status: {{ 'Active' if 'Status: active' in ufw_status.stdout else 'Inactive' }}
          Fail2ban: Installed and configured
          Security Monitoring: Available via 'cluster-security-status'

          Security Features Enabled:
          - SSH hardening with user restrictions
          - UFW firewall with cluster network access
          - Fail2ban for SSH protection
          - Kernel security parameters
          - Security monitoring and logging

  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted

    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted

# ========================================================================
# COOPERATOR ADDITIONAL SECURITY
# ========================================================================

- name: Configure Gateway-Specific Security
  hosts: cooperator
  become: yes
  gather_facts: yes

  tasks:
    - name: Additional firewall rules for gateway services
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: tcp
        comment: "{{ item.comment }}"
      loop:
        - { port: "3000", comment: "Semaphore (if installed)" }
        - { port: "4200", comment: "Web SSH (if installed)" }
        - { port: "8080", comment: "Pi-hole admin (if installed)" }

    - name: Create web services security headers
      copy:
        dest: /etc/caddy/security-headers.conf
        content: |
          # Security headers for Caddy
          header {
              # Security headers
              Strict-Transport-Security "max-age=31536000; includeSubDomains"
              X-Content-Type-Options "nosniff"
              X-Frame-Options "DENY"
              X-XSS-Protection "1; mode=block"
              Referrer-Policy "strict-origin-when-cross-origin"

              # Remove server identification
              -Server
          }
        mode: "0644"

    - name: Gateway security status
      debug:
        msg: |
          === Gateway Security Configuration ===
          Additional ports opened for web services
          Security headers configured for Caddy
          Web services accessible via HTTPS with security headers

          Recommended: Include security-headers.conf in Caddyfile
          Add: import /etc/caddy/security-headers.conf