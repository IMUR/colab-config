# Unified .profile for Co-lab Cluster - TEMPLATED VERSION
# Single source of truth for PATH and environment variables
# Works across all shells (bash, zsh, dash, sh) and SSH contexts
# Template-time node identification ensures consistent deployment

# ====================================================================
# TEMPLATE-TIME ENVIRONMENT DETECTION
# ====================================================================

# Node identification (baked in at deployment time, not runtime)
export NODE_ROLE="{{ .hostname }}"
export NODE_TYPE="{{ .node_role }}"
export ARCH="{{ .arch }}"
export OS=$(uname -s)

# Template-time architecture flags
{{- if eq .arch "aarch64" }}
export IS_ARM64=1
export IS_X86_64=0
{{- else if eq .arch "arm64" }}
export IS_ARM64=1
export IS_X86_64=0
{{- else }}
export IS_ARM64=0
export IS_X86_64=1
{{- end }}

# Template-time node capabilities
{{- if .has_pi_hardware }}
export HAS_PI_HARDWARE=1
{{- else }}
export HAS_PI_HARDWARE=0
{{- end }}

{{- if or .has_multi_gpu .has_single_gpu }}
export HAS_GPU=1
{{- else }}
export HAS_GPU=0
{{- end }}

{{- if .has_nfs_server }}
export HAS_NFS_SERVER=1
{{- else }}
export HAS_NFS_SERVER=0
{{- end }}

{{- if .has_gateway_services }}
export HAS_GATEWAY_SERVICES=1
{{- else }}
export HAS_GATEWAY_SERVICES=0
{{- end }}

{{- if .has_high_memory }}
export HAS_HIGH_MEMORY=1
{{- else }}
export HAS_HIGH_MEMORY=0
{{- end }}

{{- if .has_ml_focus }}
export HAS_ML_FOCUS=1
{{- else }}
export HAS_ML_FOCUS=0
{{- end }}

# ====================================================================
# UNIFIED PATH CONFIGURATION
# ====================================================================

# Function to safely add to PATH (avoids duplicates)
add_to_path() {
    case ":${PATH}:" in
        *:"$1":*)
            # Already in PATH
            ;;
        *)
            # Add to PATH, prepending for priority
            export PATH="$1:$PATH"
            ;;
    esac
}

# Base system paths (should already be in PATH from /etc/profile)
# /usr/local/bin:/usr/bin:/bin:/usr/games

# User-specific paths (highest priority)
[ -d "$HOME/.local/bin" ] && add_to_path "$HOME/.local/bin"
[ -d "$HOME/bin" ] && add_to_path "$HOME/bin"

# Development tools
[ -d "$HOME/.cargo/bin" ] && add_to_path "$HOME/.cargo/bin"

# NVM (Node Version Manager) environment variable
# Note: NVM shell functions are loaded in shell RC files, not here
if [ -d "$HOME/.nvm" ]; then
    export NVM_DIR="$HOME/.nvm"
    # Do not manually add Node to PATH - let NVM functions handle this
fi

# GPU-specific paths (template-time conditional)
{{- if or .has_multi_gpu .has_single_gpu }}
# CUDA (for GPU nodes)
[ -d "/usr/local/cuda/bin" ] && add_to_path "/usr/local/cuda/bin"
{{- end }}

# Architecture-specific tool paths
{{- if .is_arm64 }}
# ARM64-specific paths
[ -d "/opt/homebrew/bin" ] && add_to_path "/opt/homebrew/bin"
{{- end }}

# Snap packages
[ -d "/snap/bin" ] && add_to_path "/snap/bin"

# ====================================================================
# TOOL AVAILABILITY DETECTION (UNIFIED)
# ====================================================================

# Function to check if command exists
_has() { command -v "$1" >/dev/null 2>&1; }

# Unified tool detection (handles Debian package naming)
export HAS_EZA=$(_has eza && echo 1 || echo 0)
export HAS_BAT=$(_has bat || _has batcat && echo 1 || echo 0)
export HAS_FD=$(_has fd || _has fdfind && echo 1 || echo 0)
export HAS_RG=$(_has rg && echo 1 || echo 0)
export HAS_ZOXIDE=$(_has zoxide && echo 1 || echo 0)
export HAS_FZF=$(_has fzf && echo 1 || echo 0)
export HAS_NNN=$(_has nnn && echo 1 || echo 0)
export HAS_DELTA=$(_has delta && echo 1 || echo 0)
export HAS_DUST=$(_has dust && echo 1 || echo 0)
export HAS_STARSHIP=$(_has starship && echo 1 || echo 0)
export HAS_ATUIN=$(_has atuin && echo 1 || echo 0)
export HAS_FASTFETCH=$(_has fastfetch && echo 1 || echo 0)

# Development tools
export HAS_DOCKER=$(_has docker && echo 1 || echo 0)
export HAS_NVM=$([[ -d "$HOME/.nvm" ]] && echo 1 || echo 0)
export HAS_CARGO=$(_has cargo && echo 1 || echo 0)
export HAS_NPM=$(_has npm && echo 1 || echo 0)
export HAS_ANSIBLE=$(_has ansible && echo 1 || echo 0)

# ====================================================================
# SHELL-AGNOSTIC ENVIRONMENT
# ====================================================================

# Default editor
export EDITOR="${EDITOR:-vim}"
export VISUAL="${VISUAL:-$EDITOR}"

# Less configuration
export LESS="-R"
export LESSHISTFILE="-"

# XDG Base Directory Specification
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

# ====================================================================
# SHELL RC LOADING
# ====================================================================

# Load shell-specific RC files for interactive shells only
if [ -n "$BASH_VERSION" ] && [ -f "$HOME/.bashrc" ]; then
    # Running bash and bashrc exists
    . "$HOME/.bashrc"
fi

# Note: ZSH automatically loads ~/.zshrc, no need to source it here

# ====================================================================
# SSH COMPATIBILITY
# ====================================================================

# This file is sourced by login shells, which includes:
# - SSH with login shells: ssh user@host
# - SSH with commands when using login shell
# - Local terminal sessions

# For SSH non-interactive commands, PATH should now be preserved
# If issues persist, automation scripts should use:
# ssh user@host 'source ~/.profile; command'

# ====================================================================
# CLUSTER-SPECIFIC CONFIGURATIONS
# ====================================================================

# Co-lab cluster shared storage
export CLUSTER_NAS="{{ .cluster.nas_path }}"

# Template-time node-specific configurations
{{- if eq .hostname "cooperator" }}
# Cooperator (Gateway) specific
export COOPERATOR_SERVICES_PATH="/opt/cooperator/services"
{{- end }}

{{- if eq .hostname "projector" }}
# Projector (Compute) specific
export PROJECTOR_GPU_COUNT=4
export PROJECTOR_MEMORY="128GB"
{{- end }}

{{- if eq .hostname "director" }}
# Director (ML) specific
export DIRECTOR_ML_MODELS_PATH="/opt/ml/models"
export DIRECTOR_GPU_COUNT=1
{{- end }}

# ====================================================================
# END OF TEMPLATED UNIFIED PROFILE
# ====================================================================
