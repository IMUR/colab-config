---
- name: Comprehensive Cluster Alignment Audit
  hosts: all
  gather_facts: yes
  vars:
    audit_timestamp: "{{ ansible_date_time.iso8601 }}"
    audit_output_dir: "/tmp/cluster_audit_{{ ansible_date_time.epoch }}"
    current_user: "{{ ansible_env.USER | default(ansible_user_id) }}"
    is_local_node: "{{ current_user == ansible_user }}"
    critical_tools:
      - ansible
      - tmux
      - jq
      - git
      - curl
      - wget
      - htop
    optional_tools:
      - zsh
      - bash
      - fzf
      - rg
      - chezmoi
      - starship
      - atuin
      - uv
      - fd
      - bat
      - dust
    ansible_suite:
      - ansible-playbook
      - ansible-galaxy
      - ansible-vault
      - ansible-lint

  tasks:
    - name: Create audit output directory
      file:
        path: "{{ audit_output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Collect system information
      setup:
      register: system_facts

    - name: Check critical tools presence and location
      command: which {{ item }}
      register: critical_tool_paths
      failed_when: false
      loop: "{{ critical_tools }}"
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check optional tools presence and location
      command: which {{ item }}
      register: optional_tool_paths
      failed_when: false
      loop: "{{ optional_tools }}"
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check Ansible suite completeness
      command: which {{ item }}
      register: ansible_suite_paths
      failed_when: false
      loop: "{{ ansible_suite }}"
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Get tool versions for discovered tools
      shell: "{{ item.stdout }} --version 2>/dev/null | head -1 || echo 'version_unavailable'"
      register: tool_versions
      when: item.rc == 0
      loop: "{{ critical_tool_paths.results + optional_tool_paths.results + ansible_suite_paths.results }}"
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check cluster group membership
      command: groups {{ ansible_user }}
      register: user_groups
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Verify cluster group exists
      command: getent group cluster
      register: cluster_group_info
      failed_when: false
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check shared storage accessibility
      stat:
        path: /cluster-nas/configs
      register: nas_configs_access
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check Claude Code symlink
      stat:
        path: "~/.claude"
      register: claude_symlink_status
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check NFS mounts
      command: mount | grep cluster-nas
      register: nfs_mounts
      failed_when: false
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Check for common Debian naming conflicts
      shell: |
        fd_path=$(which fd 2>/dev/null || which fdfind 2>/dev/null || echo "not_found")
        bat_path=$(which bat 2>/dev/null || which batcat 2>/dev/null || echo "not_found")
        echo "fd:$fd_path bat:$bat_path"
      register: debian_naming_check
      changed_when: false
      delegate_to: "{{ 'localhost' if is_local_node else inventory_hostname }}"
      connection: "{{ 'local' if is_local_node else 'ssh' }}"

    - name: Generate per-node audit report
      template:
        src: node_audit_report.j2
        dest: "{{ audit_output_dir }}/{{ inventory_hostname }}_audit.json"
      delegate_to: localhost
      vars:
        node_name: "{{ inventory_hostname }}"
        node_arch: "{{ ansible_architecture }}"
        node_user: "{{ ansible_user }}"
        critical_tools_status: "{{ critical_tool_paths.results }}"
        optional_tools_status: "{{ optional_tool_paths.results }}"
        ansible_suite_status: "{{ ansible_suite_paths.results }}"
        versions_info: "{{ tool_versions.results }}"
        group_membership: "{{ user_groups.stdout }}"
        cluster_group_exists: "{{ cluster_group_info.rc == 0 }}"
        nas_accessible: "{{ nas_configs_access.stat.exists }}"
        claude_symlinked: "{{ claude_symlink_status.stat.islnk | default(false) }}"
        nfs_mounted: "{{ nfs_mounts.rc == 0 }}"
        debian_tools: "{{ debian_naming_check.stdout }}"

    - name: Generate cluster-wide compliance summary
      template:
        src: cluster_compliance_summary.j2
        dest: "{{ audit_output_dir }}/cluster_compliance_summary.json"
      delegate_to: localhost
      run_once: true
      vars:
        audit_nodes: "{{ ansible_play_hosts }}"
        audit_timestamp: "{{ audit_timestamp }}"

    - name: Display audit completion message
      debug:
        msg: |
          Cluster alignment audit completed successfully!
          Results available in: {{ audit_output_dir }}
          Per-node reports: {{ audit_output_dir }}/[hostname]_audit.json
          Cluster summary: {{ audit_output_dir }}/cluster_compliance_summary.json
      run_once: true