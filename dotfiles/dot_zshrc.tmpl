# ~/.zshrc - Zsh configuration
# Managed by Chezmoi with node-specific templating
# Node: {{ .chezmoi.hostname }}

# ====================================================================
# INSTANT PROMPT (Must be at the top)
# ====================================================================

# Enable Powerlevel10k instant prompt if available
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ====================================================================
# OH-MY-ZSH CONFIGURATION
# ====================================================================

# Path to oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme selection (node-specific if desired)
{{ if eq .chezmoi.hostname "crtr" -}}
ZSH_THEME="robbyrussell"  # Simple for gateway
{{ else if eq .chezmoi.hostname "prtr" -}}
ZSH_THEME="agnoster"      # Detailed for compute
{{ else if eq .chezmoi.hostname "drtr" -}}
ZSH_THEME="powerlevel10k/powerlevel10k"  # Rich for ML platform
{{ else -}}
ZSH_THEME="robbyrussell"
{{ end }}

# Oh-My-Zsh settings
CASE_SENSITIVE="false"
HYPHEN_INSENSITIVE="true"
DISABLE_AUTO_UPDATE="false"
DISABLE_UPDATE_PROMPT="true"
export UPDATE_ZSH_DAYS=13
DISABLE_LS_COLORS="false"
DISABLE_AUTO_TITLE="false"
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
DISABLE_UNTRACKED_FILES_DIRTY="false"
HIST_STAMPS="yyyy-mm-dd"

# Plugins (node-aware selection)
plugins=(
    git
    docker
    docker-compose
    kubectl
    terraform
    ansible
    command-not-found
    zsh-autosuggestions
    zsh-syntax-highlighting
    history-substring-search
    {{ if .has_gpu -}}
    # GPU-related plugins
    python
    pip
    virtualenv
    {{ end -}}
    {{ if eq .chezmoi.hostname "crtr" -}}
    # Gateway specific
    systemd
    nmap
    {{ end -}}
)

# Load Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# ====================================================================
# USER CONFIGURATION
# ====================================================================

# History configuration
HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=50000
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_VERIFY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

# Directory navigation
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHDMINUS
setopt CDABLE_VARS

# Completion
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END
setopt PATH_DIRS
setopt AUTO_MENU
setopt AUTO_LIST
setopt AUTO_PARAM_SLASH
setopt EXTENDED_GLOB
unsetopt MENU_COMPLETE
unsetopt FLOW_CONTROL

# ====================================================================
# KEY BINDINGS
# ====================================================================

# Use emacs key bindings
bindkey -e

# History search
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

# Word navigation
bindkey '^[[1;5C' forward-word  # Ctrl+Right
bindkey '^[[1;5D' backward-word # Ctrl+Left

# ====================================================================
# ALIASES
# ====================================================================

# Standard aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias df='df -h'
alias free='free -h'
alias top='htop'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline --graph'
alias gd='git diff'

# Cluster navigation
alias go-config='cd ~/Projects/colab-config'
alias go-services='cd ~/Projects/colab-config/services'
alias go-ansible='cd ~/Projects/colab-config/ansible'

# Node-specific aliases
{{ if eq .chezmoi.hostname "crtr" -}}
# Gateway aliases
alias cluster-health='ansible all -m ping'
alias show-mounts='showmount -e localhost'
alias service-status='docker ps'
{{ else if eq .chezmoi.hostname "prtr" -}}
# Compute aliases
alias gpu-status='nvidia-smi'
alias gpu-watch='watch -n 1 nvidia-smi'
alias cuda-version='nvcc --version'
{{ else if eq .chezmoi.hostname "drtr" -}}
# ML platform aliases
alias jupyter-start='jupyter lab --ip=0.0.0.0'
alias tb='tensorboard --logdir'
alias gpu-status='nvidia-smi'
{{ end }}

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Docker aliases
alias dc='docker compose'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dimg='docker images'
alias dlog='docker logs -f'

# ====================================================================
# FUNCTIONS
# ====================================================================

# Create directory and change to it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive types
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# ====================================================================
# DEVELOPMENT TOOLS
# ====================================================================

# Python virtual environment
if command -v python3 >/dev/null 2>&1; then
    alias py='python3'
    alias pip='python3 -m pip'
    alias venv='python3 -m venv'

    # Activate venv in current directory
    activate() {
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
        elif [ -f ".venv/bin/activate" ]; then
            source .venv/bin/activate
        else
            echo "No virtual environment found"
        fi
    }
fi

# Node.js via NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# ====================================================================
# MODERN CLI TOOLS
# ====================================================================

# Modern replacements if available
command -v eza >/dev/null 2>&1 && alias ls='eza'
command -v bat >/dev/null 2>&1 && alias cat='bat'
command -v rg >/dev/null 2>&1 && alias grep='rg'
command -v fd >/dev/null 2>&1 && alias find='fd'
command -v duf >/dev/null 2>&1 && alias df='duf'
command -v btm >/dev/null 2>&1 && alias top='btm'

# Starship prompt (if available and not using p10k)
if [[ "$ZSH_THEME" != "powerlevel10k/powerlevel10k" ]] && command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# Atuin for better history (if available)
if command -v atuin >/dev/null 2>&1; then
    eval "$(atuin init zsh)"
fi

# Zoxide for better cd (if available)
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
    alias cd='z'
fi

# ====================================================================
# COMPLETIONS
# ====================================================================

# Load completions
if [ -d "$HOME/.zsh/completions" ]; then
    fpath=($HOME/.zsh/completions $fpath)
fi

# Initialize completion system
autoload -Uz compinit
compinit

# ====================================================================
# LOCAL OVERRIDES
# ====================================================================

# Source local configuration if it exists
[ -f "$HOME/.zshrc.local" ] && source "$HOME/.zshrc.local"

# P10k configuration
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
