safety_framework:
  classification: system_infrastructure
  risk_level: high
  approval_required: true

prohibited_operations:
  - pattern: "rm -rf /*"
    severity: critical
    reason: "System destruction risk"

  - pattern: "become: yes without when condition"
    severity: high
    reason: "Unrestricted privilege escalation"
    alternative: "Add specific when conditions"

  - pattern: "systemd: state=stopped"
    severity: high
    reason: "Service disruption risk"
    alternative: "Document maintenance window"

  - pattern: "lineinfile without backup"
    severity: medium
    reason: "No rollback capability"
    alternative: "Add backup: yes"

validation_gates:
  pre_execution:
    - name: syntax_check
      command: "ansible-playbook --syntax-check {{ playbook }}"
      required: true
      blocking: true

    - name: inventory_validation
      command: "ansible-inventory --list --yaml"
      required: true
      blocking: true

    - name: dry_run
      command: "ansible-playbook --check --diff {{ playbook }}"
      required: true
      blocking: false

  post_execution:
    - name: cluster_health
      command: "ansible all -m ping"
      required: true

    - name: service_verification
      command: "scripts/validation/verify-services.sh"
      required_for: ["service_changes"]

approval_workflow:
  required_for:
    - system_file_modification
    - service_configuration
    - network_changes
    - user_permission_changes

  approval_process:
    1_documentation:
      required: true
      template: "docs/templates/change-request.md"

    2_risk_assessment:
      required: true
      checklist:
        - "Impact analysis completed"
        - "Rollback plan documented"
        - "Testing completed in dev"

    3_approval:
      type: human_review
      approvers: ["admin", "team_lead"]
      timeout: "24h"

    4_execution_window:
      preferred: "maintenance_window"
      notification_required: true

safe_patterns:
  recommended:
    - name: "Conditional execution"
      pattern: |
        when:
          - ansible_facts['os_family'] == "Debian"
          - inventory_hostname in groups['production']

    - name: "Safe file operations"
      pattern: |
        backup: yes
        validate: "/usr/bin/check_config %s"

    - name: "Graceful service handling"
      pattern: |
        systemd:
          name: service_name
          state: reloaded
          daemon_reload: yes

rollback_procedures:
  automatic_triggers:
    - "Validation failure post-execution"
    - "Health check failure"
    - "Service unavailability"

  manual_procedures:
    - name: "Configuration rollback"
      steps:
        - "Restore from backup files"
        - "Reload affected services"
        - "Verify functionality"

    - name: "Full system restore"
      steps:
        - "Boot from recovery image"
        - "Restore from snapshot"
        - "Reconfigure network"
