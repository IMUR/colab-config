# Modern ZSH Configuration - Rock Solid + Fun Productivity
# Designed for cluster environments with cross-arch compatibility

# Performance: Start timing for optimization
zmodload zsh/datetime
_shell_start_time=$EPOCHREALTIME

# ====================================================================
# ENVIRONMENT DETECTION
# ====================================================================

# Architecture and OS detection
export ARCH=$(uname -m)
export OS=$(uname -s)
export NODE_ROLE="${NODE_ROLE:-$(hostname)}"

# Path prioritization - consistent across nodes
typeset -U path PATH
path=(
  $HOME/.local/bin
  $HOME/.cargo/bin
  /usr/local/bin
  /usr/bin
  /bin
  /usr/games
)

# ====================================================================
# MODERN TOOL AVAILABILITY CHECKS
# ====================================================================

# Check for modern tools and set flags
_has() { command -v "$1" >/dev/null 2>&1; }

export HAS_EXA=$(_has exa && echo 1 || echo 0)
export HAS_BAT=$(_has bat && echo 1 || echo 0)
export HAS_FD=$(_has fd && echo 1 || echo 0)
export HAS_RG=$(_has rg && echo 1 || echo 0)
export HAS_ZOXIDE=$(_has zoxide && echo 1 || echo 0)
export HAS_FZF=$(_has fzf && echo 1 || echo 0)
export HAS_NNN=$(_has nnn && echo 1 || echo 0)
export HAS_DELTA=$(_has delta && echo 1 || echo 0)
export HAS_DUST=$(_has dust && echo 1 || echo 0)

# ====================================================================
# ZSH OPTIONS - PRODUCTIVITY FOCUSED
# ====================================================================

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

setopt HIST_IGNORE_DUPS      # Don't record duplicate entries
setopt HIST_IGNORE_ALL_DUPS  # Delete old duplicate entries
setopt HIST_FIND_NO_DUPS     # Don't display duplicates during search
setopt HIST_SAVE_NO_DUPS     # Don't save duplicates
setopt HIST_VERIFY           # Verify history expansions
setopt SHARE_HISTORY         # Share history between sessions
setopt APPEND_HISTORY        # Append to history file
setopt INC_APPEND_HISTORY    # Append immediately, not on exit

# Directory navigation
setopt AUTO_CD               # Auto cd when typing directory name
setopt AUTO_PUSHD            # Push directories to stack
setopt PUSHD_IGNORE_DUPS     # Don't push duplicates
setopt PUSHD_SILENT          # Don't print directory stack

# Completion
setopt AUTO_MENU             # Show menu on tab
setopt COMPLETE_IN_WORD      # Complete from both ends
setopt ALWAYS_TO_END         # Move cursor to end after completion

# Globbing
setopt EXTENDED_GLOB         # Enable extended globbing
setopt NULL_GLOB             # Remove non-matching globs

# ====================================================================
# MODERN ALIASES - ENHANCED PRODUCTIVITY
# ====================================================================

# Core enhanced replacements
if [[ $HAS_EXA == 1 ]]; then
  alias ls='exa --icons --group-directories-first'
  alias ll='exa -l --icons --group-directories-first --time-style=relative'
  alias la='exa -la --icons --group-directories-first --time-style=relative'
  alias tree='exa --tree --icons'
  alias ltree='exa --tree --icons -l'
else
  alias ls='ls --color=auto --group-directories-first'
  alias ll='ls -la --color=auto'
  alias la='ls -A --color=auto'
fi

if [[ $HAS_BAT == 1 ]]; then
  alias cat='bat --style=auto'
  alias less='bat --paging=always'
else
  alias cat='cat'
fi

if [[ $HAS_FD == 1 ]]; then
  alias find='fd'
else
  alias find='find'
fi

if [[ $HAS_RG == 1 ]]; then
  alias grep='rg'
else
  alias grep='grep --color=auto'
fi

if [[ $HAS_DUST == 1 ]]; then
  alias du='dust'
else
  alias du='du -h'
fi

# File manager
if [[ $HAS_NNN == 1 ]]; then
  alias n='nnn -e'
  alias nnn='nnn -e'
  export NNN_FIFO=/tmp/nnn.fifo
  export NNN_PLUG='p:preview-tabbed'
fi

# Git enhancements
if [[ $HAS_DELTA == 1 ]]; then
  export GIT_PAGER='delta'
fi

# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Cluster-specific shortcuts
alias cluster='cd /cluster-nas'
alias configs='cd /cluster-nas/configs'
alias docs='cd /cluster-nas/documentation'

# Quick system info
alias sysinfo='echo "Node: $(hostname)" && echo "Role: $NODE_ROLE" && echo "Arch: $ARCH" && echo "Load: $(uptime | cut -d, -f3-)"'

# ====================================================================
# MODERN INTEGRATIONS
# ====================================================================

# Zoxide (smart cd) initialization
if [[ $HAS_ZOXIDE == 1 ]]; then
  eval "$(zoxide init zsh)"
  alias cd='z'
  alias cdi='zi'  # Interactive mode
fi

# FZF integration
if [[ $HAS_FZF == 1 ]]; then
  # Use fd for fzf if available
  if [[ $HAS_FD == 1 ]]; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  fi
  
  # Enhanced fzf options
  export FZF_DEFAULT_OPTS='
    --height 40%
    --layout=reverse
    --border
    --color=hl:#5f87af
    --color=hl+:#5fd7ff
    --color=info:#afaf87
    --color=marker:#87ff00
    --color=pointer:#ff87d7
    --color=spinner:#ff87d7
    --color=prompt:#87ff00
  '
  
  # Load fzf key bindings and completion
  source <(fzf --zsh) 2>/dev/null || true
fi

# ====================================================================
# COMPLETION SYSTEM
# ====================================================================

# Initialize modern completion system
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
  compinit -d "${ZDOTDIR:-$HOME}/.zcompdump"
else
  compinit -C -d "${ZDOTDIR:-$HOME}/.zcompdump"
fi

# Modern completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '[%d]'

# ====================================================================
# PROMPT SYSTEM - STARSHIP
# ====================================================================

# Initialize Starship prompt
if _has starship; then
  eval "$(starship init zsh)"
else
  # Fallback prompt - clean and functional
  autoload -Uz vcs_info
  precmd() { vcs_info }
  zstyle ':vcs_info:git:*' formats ' %b'
  setopt PROMPT_SUBST
  PROMPT='%F{green}%n%f@%F{blue}%m%f %F{yellow}%~%f%F{red}${vcs_info_msg_0_}%f %# '
fi

# ====================================================================
# HISTORY SYSTEM - ATUIN
# ====================================================================

# Initialize Atuin if available (already installed on crtr)
if _has atuin; then
  eval "$(atuin init zsh)"
fi

# ====================================================================
# PERFORMANCE REPORTING
# ====================================================================

# Show startup time (only in interactive shells)
if [[ -o interactive ]]; then
  _shell_end_time=$EPOCHREALTIME
  _startup_time=$(( (_shell_end_time - _shell_start_time) * 1000 ))
  if (( _startup_time > 100 )); then
    echo "üêö Shell loaded in ${_startup_time:.0f}ms (consider optimization)"
  fi
fi

# ====================================================================
# NODE-SPECIFIC CUSTOMIZATIONS
# ====================================================================

# Load node-specific configurations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
[[ -f ~/.zshrc.$NODE_ROLE ]] && source ~/.zshrc.$NODE_ROLE

# Clean up
unset _shell_start_time _shell_end_time _startup_time
unfunction _has